{"ast":null,"code":"import axios from 'axios';\naxios.defaults.timeout = Number(process.env.NEXT_PUBLIC_API_TIMEOUT_MS) || 3000;\nexport const request = ({\n  method = 'POST',\n  url = '',\n  data = null,\n  contentType = 'application/json',\n  baseURL = 'http://localhost:3001/api/'\n}) => {\n  const options = {\n    method,\n    baseURL,\n    url,\n    headers: {\n      'Content-Type': contentType\n    }\n  };\n\n  // if (data && method === 'GET') {\n  //   options.params = data;\n  // } else if (data) {\n  //   options.data = data;\n  // }\n\n  const errorHandler = axiosError => {\n    let error = {\n      code: 'NETWORK_ERROR',\n      message: 'Network error',\n      status: 600\n    };\n    return error;\n  };\n  return new Promise((resolve, reject) => {\n    axios(options).then(response => resolve(response.data)).catch(error => reject(errorHandler(error)));\n  });\n};","map":{"version":3,"names":["axios","defaults","timeout","Number","process","env","NEXT_PUBLIC_API_TIMEOUT_MS","request","method","url","data","contentType","baseURL","options","headers","errorHandler","axiosError","error","code","message","status","Promise","resolve","reject","then","response","catch"],"sources":["/Users/m.gainatullin/work/todo-test/todo-frontent/src/core/helpers/request.ts"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig, Method } from 'axios';\n\naxios.defaults.timeout = Number(process.env.NEXT_PUBLIC_API_TIMEOUT_MS) || 3000;\n\ninterface IRequest {\n  method?: Method;\n  url: string;\n  data?: any;\n  contentType?: string;\n  baseURL?: string;\n}\n\ntype TError = {\n  code: string;\n  message: any;\n  status: number;\n};\n\nexport const request = ({\n  method = 'POST',\n  url = '',\n  data = null,\n  contentType = 'application/json',\n  baseURL = 'http://localhost:3001/api/',\n}: IRequest): Promise<any> => {\n  const options = {\n    method,\n    baseURL,\n    url,\n    headers: { 'Content-Type': contentType },\n  };\n\n  // if (data && method === 'GET') {\n  //   options.params = data;\n  // } else if (data) {\n  //   options.data = data;\n  // }\n\n  const errorHandler = (axiosError: AxiosError) => {\n    let error: TError = { code: 'NETWORK_ERROR', message: 'Network error', status: 600 };\n    return error;\n  };\n\n  return new Promise((resolve, reject) => {\n    axios(options)\n      .then(response => resolve(response.data))\n      .catch(error => reject(errorHandler(error)));\n  });\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAkD,OAAO;AAErEA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAGC,MAAM,CAACC,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAAC,IAAI,IAAI;AAgB/E,OAAO,MAAMC,OAAO,GAAGA,CAAC;EACtBC,MAAM,GAAG,MAAM;EACfC,GAAG,GAAG,EAAE;EACRC,IAAI,GAAG,IAAI;EACXC,WAAW,GAAG,kBAAkB;EAChCC,OAAO,GAAG;AACF,CAAC,KAAmB;EAC5B,MAAMC,OAAO,GAAG;IACdL,MAAM;IACNI,OAAO;IACPH,GAAG;IACHK,OAAO,EAAE;MAAE,cAAc,EAAEH;IAAY;EACzC,CAAC;;EAED;EACA;EACA;EACA;EACA;;EAEA,MAAMI,YAAY,GAAIC,UAAsB,IAAK;IAC/C,IAAIC,KAAa,GAAG;MAAEC,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAE,eAAe;MAAEC,MAAM,EAAE;IAAI,CAAC;IACpF,OAAOH,KAAK;EACd,CAAC;EAED,OAAO,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCvB,KAAK,CAACa,OAAO,CAAC,CACXW,IAAI,CAACC,QAAQ,IAAIH,OAAO,CAACG,QAAQ,CAACf,IAAI,CAAC,CAAC,CACxCgB,KAAK,CAACT,KAAK,IAAIM,MAAM,CAACR,YAAY,CAACE,KAAK,CAAC,CAAC,CAAC;EAChD,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}